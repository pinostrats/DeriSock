namespace DeriSock.Request
{
  using Newtonsoft.Json;

  public class BlockTradeParams
  {
    /// <summary>
    ///   Timestamp, shared with other party
    /// </summary>
    [JsonProperty("timestamp")]
    public long Timestamp { get; set; }

    /// <summary>
    ///   Nonce, shared with other party
    /// </summary>
    [JsonProperty("nonce")]
    public string Nonce { get; set; }

    /// <summary>
    ///   <para>Describes if user wants to be maker or taker of trades</para>
    ///   <para>Enum: <c>maker</c>, <c>taker</c></para>
    /// </summary>
    [JsonProperty("role")]
    public string Role { get; set; }

    /// <summary>
    ///   of objects		List of trades for block trade
    /// </summary>
    [JsonProperty("trades")]
    public Trade[] Trades { get; set; }

    /// <summary>
    ///   Signature of block trade generated by private/verify_block_trade method
    /// </summary>
    [JsonProperty("counterparty_signature")]
    public string CounterpartySignature { get; set; }

    /// <summary>
    ///   <para>The currency symbol</para>
    ///   <para>Enum: <c>BTC</c>, <c>ETH</c></para>
    /// </summary>
    [JsonProperty("currency")]
    public string Currency { get; set; }

    public class Trade
    {
      /// <summary>
      ///   Instrument name
      /// </summary>
      [JsonProperty("instrument_name")]
      public string InstrumentName { get; set; }

      /// <summary>
      ///   Price for trade
      /// </summary>
      [JsonProperty("price")]
      public decimal Price { get; set; }

      /// <summary>
      ///   It represents the requested trade size. For perpetual and futures the amount is in USD units, for options it is
      ///   amount of corresponding cryptocurrency contracts, e.g., BTC or ETH
      /// </summary>
      [JsonProperty("amount")]
      public decimal Amount { get; set; }

      /// <summary>
      ///   <para>Direction of trade from the maker perspective</para>
      ///   <para>Enum: <c>buy</c>, <c>sell</c></para>
      /// </summary>
      [JsonProperty("direction")]
      public string Direction { get; set; }
    }
  }
}
